{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
        },
        "contracts/FundMe.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\nimport \"contracts/libs/PriceConverter.sol\";\r\n\r\ncontract FundMe {\r\n    using PriceConverter for uint256;\r\n    uint256 public minUsd = 50; // 最少50美元\r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToAmmountFunded;\r\n    address public owner;\r\n    AggregatorV3Interface private s_priceFeed;\r\n\r\n    constructor(address priceFeed) {\r\n        s_priceFeed = AggregatorV3Interface(priceFeed);\r\n        // i_owner = msg.sender;\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(\r\n            msg.value >= minUsd.getConversionPrice(s_priceFeed),\r\n            \"Didn't send enough usd\"\r\n        );\r\n\r\n        // 记录下发送人的地址\r\n        funders.push(msg.sender);\r\n        // 记录下发送的金额\r\n        addressToAmmountFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Sender is not owner\");\r\n        _;\r\n    }\r\n}\r\n"
        },
        "contracts/libs/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    // @Param: usdPrce 美元的数值\r\n    // @Result: Wei的数值\r\n    function getConversionPrice(\r\n        uint256 usdPrice,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n\r\n        // price的值是302921246644(由于不能有小数，其实真实数据应该是：1eth = 3029.21221246644美元)\r\n        // 所以需要除以1e8\r\n        // 后面还需要将eth转换为Wei，需要乘以1e18\r\n        // 最终：(50 / (302921246644/1e8)) * 1e18 = 50 * 1e26 / 302921246644\r\n        return uint256((usdPrice * 1e26) / uint256(price));\r\n    }\r\n}\r\n"
        }
    },
    "settings": {
        "evmVersion": "paris",
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
